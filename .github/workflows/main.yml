name: 'main'

on:
  push:
    branches:
    - Davenche

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - runs-on: ubuntu-18.04
        - runs-on: windows-2019

    runs-on: ${{ matrix.config.runs-on }}

    steps:
    - name: Install Core Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-9
        sudo apt install -y cmake
        sudo apt install -y build-essential
        sudo apt install -y ninja-build

    - name: Get top commit details
      uses: actions/github-script@0.3.0
      id: author-date
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const commit_details = await github.git.getCommit({ owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha });
          return commit_details.data.author.date

    - name: Setup environment
      shell: bash
      run: |
        git config --global core.autocrlf input
        echo "COMMITTED_AT=$(date -d ${{ steps.author-date.outputs.result }} +'%Y.%m.%d_%H.%M.%S')" >> $GITHUB_ENV

    - name: Pull source
      uses: actions/checkout@v2

#    - name: Configure AWS Credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: us-west-1

    - name: Build on Linux
      if: runner.os == 'Linux'
      shell: bash
      env:
        CC: gcc-9
        CXX: g++-9
      run: |
        env
        which cmake && cmake --version
        which ninja && ninja --version
        which $CC && $CC --version
        which $CXX && $CXX --version

        cd runtime/Cpp
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=out/install/Debug -DWITH_STATIC_CRT=0 -DANTLR4_INSTALL=1 -S . -B out/build/Debug
        cmake --build out/build/Debug -j `nproc`
        cmake --install out/build/Debug

        cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=out/install/Release -DWITH_STATIC_CRT=0 -DANTLR4_INSTALL=1 -S . -B out/build/Release
        cmake --build out/build/Release -j `nproc`
        cmake --install out/build/Release

    - name: Build on Windows
      if: runner.os == 'Windows'
      shell: cmd
      env:
        CC: cl
        CXX: cl
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

        set
        where cmake && cmake --version
        where ninja && ninja --version
        where %CC% && %CC%
        where %CXX% && %CXX%

        cd runtime/Cpp
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=out/install/Debug -DWITH_STATIC_CRT=0 -DANTLR4_INSTALL=1 -S . -B out/build/Debug
        cmake --build out/build/Debug -j %NUMBER_OF_PROCESSORS%
        cmake --install out/build/Debug

        cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=out/install/Release -DWITH_STATIC_CRT=0 -DANTLR4_INSTALL=1 -S . -B out/build/Release
        cmake --build out/build/Release -j %NUMBER_OF_PROCESSORS%
        cmake --install out/build/Release

    - name: Archive artifacts on Linux
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v2
      with:
        name: antlr4_bionic-gcc_${{ env.COMMITTED_AT }}
        path: runtime/Cpp/out/install

    - name: Archive artifacts on Windows
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: antlr4_windows-msvc_${{ env.COMMITTED_AT }}
        path: runtime/Cpp/out/install
